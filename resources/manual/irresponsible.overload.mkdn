# overload

## A simple library that deals with dynamic loading of classes and vars

## Cheatsheet

```clojure
(about "foo<>")
(array-subtype "foo<>")
(overload 'byte)
(overload-sym 'byte)
(primitive-array-subtype "bytes")
(primitive? "double")
(valid-class? "ClassName.Goes.Here")
(valid-var? "foo/bar")
```

## Functions

### primitive-array-subtype

Returns the singular form of aliases for primative arrays.

Returns nil otherwise.

```clojure
(is (= "byte" (primitive-array-subtype "bytes")))
(is (= "char" (primitive-array-subtype "chars")))
(is (= nil    (primitive-array-subtype "IDoNotExist")))
```

### array-subtype

If the type names an array, returns the singular that the array is composed of.

Returns nil otherwise.

```clojure
(is (= "foo" (array-subtype "foo<>")))
(is (= "bar" (array-subtype "bar<>")))
(is (= nil   (array-subtype "NotAnArray")))
```

### primitive?

Returns true if the given string names a primitive

```clojure
(is (= true  (primitive? "double"    )))
(is (= true  (primitive? "byte"      )))
(is (= false (primitive? "jabberwock")))
```

### valid-class?

Returns true if the given string is a legal descriptor of a class name

```clojure
(is (= true  (valid-class? "ClassName.Goes.Here"         )))
(is (= false (valid-class? "5NumbersArentLegalFirstChars")))
(is (= false (valid-class? "Also ain't valid"            )))
```

### valid-var?

Returns true if the given string is a legal descriptor of a variable

```clojure
(is (= true  (valid-var? "byte"          )))
(is (= true  (valid-var? "class.name/var")))
(is (= false (valid-var? "in/val.id"     )))
```

### about

Attempts to decode the given type string and returns a vector of decomposed information

Returns format:
- `[:array     OFTYPE     ]`
- `[:primitive PRIMTYPE   ]`
- `[:symbol    SYMBOLNAME ]`
- `[:class     CLASSSYMBOL]`

```clojure
(is (= [:array [:symbol "foo"]]      (about "foo<>")))
(is (= [:primitive "byte"]           (about "byte")))
(is (= [:symbol "foo"]               (about "foo")))
(is (= [:symbol "java.lang.Object"]  (about "java.lang.Object")))
(is (nil?                            (about "1`nv@L1d")))
```

### overload-sym

### overload

Resolves the given symbol/string and returns a data structure
of decomposed information about that symbol/string.

Similar to `about`, except uses actual runtime typedata instead of
simple cosmetic rules about what it *could* be.

```clojure
(is (= [:primitive 'byte]          (overload 'byte   )))
(is (= [:primitive 'char]          (overload 'char   )))
(is (= [:array [:primitive 'byte]] (overload 'byte<> )))
(is (= [:class java.lang.Byte]     (overload 'java.lang.Byte)))
(is (= [:var #'clojure.core/str]   (overload 'clojure.core/str)))
```

